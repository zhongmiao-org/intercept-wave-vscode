# GitHub Actions Workflow for publishing the VS Code extension
# Triggered when a draft release is manually published
# Publishes the extension to VS Code Marketplace using vsce

name: Release
on:
  release:
    types: [prereleased, released]

jobs:
  # Publish the extension to VS Code Marketplace
  release:
    name: Publish Extension
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      # Check out the current repository at the release tag
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      # Patch CHANGELOG at the very beginning so packaging includes the correct versioned section
      - name: Patch Changelog (prepare package)
        shell: bash
        run: |
          set -euo pipefail
          VERSION_RAW="${{ github.event.release.tag_name }}"
          VERSION="${VERSION_RAW#v}"

          echo "Patching CHANGELOG.md: [Unreleased] -> [$VERSION] and adding new [Unreleased] on top."
          if [ -f CHANGELOG.md ]; then
            awk -v ver="$VERSION" '
              !done && $0 ~ /^## \[Unreleased\]\s*$/ { print "## [Unreleased]"; print ""; print "## [" ver "]"; done=1; next }
              { print }
            ' CHANGELOG.md > CHANGELOG.md.tmp && mv CHANGELOG.md.tmp CHANGELOG.md
          else
            echo "CHANGELOG.md not found; skipping patch."
          fi

      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Install dependencies
      - name: Install Dependencies
        run: npm ci

      # Compile the extension
      - name: Compile Extension
        run: npm run compile

      # Publish to VS Code Marketplace
      - name: Publish to VS Code Marketplace
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          npm install -g @vscode/vsce
          echo "Checking vsce version..."
          vsce --version
          echo "Attempting to publish extension..."
          echo "Publisher: Ark65"
          echo "Package version: $(node -p "require('./package.json').version")"
          echo "Token length: ${#VSCE_PAT}"
          vsce publish --pat "$VSCE_PAT"

      # Package the extension for release assets
      - name: Package Extension
        run: vsce package

      # Upload the .vsix file as a release asset
      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.event.release.tag_name }} *.vsix

      # After successful publish, update main branch changelog via PR with auto-merge
      - name: Check out main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Patch Changelog on main
        shell: bash
        run: |
          set -euo pipefail
          VERSION_RAW="${{ github.event.release.tag_name }}"
          VERSION="${VERSION_RAW#v}"
          if [ -f CHANGELOG.md ]; then
            awk -v ver="$VERSION" '
              !done && $0 ~ /^## \[Unreleased\]\s*$/ { print "## [Unreleased]"; print ""; print "## [" ver "]"; done=1; next }
              { print }
            ' CHANGELOG.md > CHANGELOG.md.tmp && mv CHANGELOG.md.tmp CHANGELOG.md
          else
            echo "CHANGELOG.md not found; skipping patch."
          fi

      - name: Create PR for changelog update (auto-merge)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          VERSION_RAW="${{ github.event.release.tag_name }}"
          VERSION="${VERSION_RAW#v}"
          BRANCH="changelog/update-$VERSION"
          LABEL="release changelog"

          git switch -c "$BRANCH"
          git config user.email "action@github.com"
          git config user.name "GitHub Action"

          git add CHANGELOG.md || true

          if ! git diff --cached --quiet; then
            git commit -m "chore(changelog): update for $VERSION"
            git push --set-upstream origin "$BRANCH"

            gh label create "$LABEL" \
              --description "Pull requests with release changelog update" \
              --force \
              || true

            gh pr create \
              --title "Changelog update - $VERSION" \
              --body "This PR updates \`CHANGELOG.md\` replacing Unreleased with \`$VERSION\` and adds a new Unreleased section." \
              --label "$LABEL" \
              --base main \
              --head "$BRANCH"

            gh pr merge --auto --squash "$BRANCH" || true
          else
            echo "No changelog changes detected; skipping PR creation."
          fi
