# GitHub Actions Workflow for building and testing the VS Code extension
# - Run on push to main branch and on pull requests
# - Install dependencies and build the extension
# - Create a draft release after successful build

name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch
  push:
    branches: [ main ]
  # Trigger the workflow on any pull request
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Build and test the VS Code extension
  build:
    name: Build Extension
    runs-on: ubuntu-latest
    steps:
      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Install dependencies
      - name: Install Dependencies
        run: npm ci

      # Compile TypeScript
      - name: Compile Extension
        run: npm run compile

      # Package the extension
      - name: Package Extension
        run: |
          npm install -g @vscode/vsce
          vsce package

      # Upload the packaged extension as artifact
      - name: Upload Extension Package
        uses: actions/upload-artifact@v4
        with:
          name: vscode-extension
          path: '*.vsix'

  # Prepare a draft release for GitHub Releases page for manual verification
  # If accepted and published, the release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Remove old release drafts
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{} || true

      # Extract changelog content for this version
      - name: Extract Changelog
        id: changelog
        run: |
          VERSION="v$(node -p "require('./package.json').version")"
          VERSION_WITHOUT_V="${VERSION#v}"

          # First try to extract from [Unreleased]
          CHANGELOG=$(awk '/## \[Unreleased\]/{flag=1; next} /## \[/{flag=0} flag' CHANGELOG.md | sed '/^[[:space:]]*$/d')

          # If Unreleased is empty or doesn't exist, try to extract from version section
          if [ -z "$CHANGELOG" ]; then
            echo "No Unreleased content found, trying version section [$VERSION_WITHOUT_V]..."
            CHANGELOG=$(awk "/## \[$VERSION_WITHOUT_V\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md)
          fi

          # If still empty, use a default message
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Release $VERSION"
          fi

          # Save to file for multi-line content
          echo "$CHANGELOG" > release_notes.md

          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Create a new release draft
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.changelog.outputs.version }}"

          gh release create $VERSION \
            --draft \
            --title "$VERSION" \
            --notes-file release_notes.md